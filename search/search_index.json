{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenido-a-la-wiki-sobre-baas-y-supabase","title":"Bienvenido a la Wiki sobre BaaS y Supabase \ud83d\udc4b\ud83c\udffc","text":"<p>\u00a1Bienvenidos! Prep\u00e1rense para descubrir el Backend as a Service (BaaS). En esta wiki desglosaremos los conceptos importantes y exploraremos por qu\u00e9 Supabase se ha convertido en una alternativa genial a Firebase. \u00a1Empecemos!</p>"},{"location":"#contenido","title":"Contenido","text":"<ul> <li>\u00bfQu\u00e9 es BaaS?</li> <li>Supabase</li> <li>Integraci\u00f3n con IoT</li> <li>Conceptos de Base de Datos</li> <li>Bibliografia</li> </ul>"},{"location":"baas/","title":"\u00bfA qu\u00e9 se le llama Backend as a Service (BaaS)?","text":""},{"location":"baas/#definicion-de-baas","title":"Definici\u00f3n de BaaS \ud83d\udcd5","text":"<p>Backend-as-a-Service (BaaS) es un modelo de servicio en la nube que permite a los desarrolladores externalizar las funciones del backend y centrarse \u00fanicamente en el frontend. </p> <p>Los proveedores de BaaS ofrecen soluciones ya configuradas para gestionar en el servidor tareas como la autenticaci\u00f3n, la administraci\u00f3n de bases de datos, actualizaciones remotas, notificaciones push, as\u00ed como el almacenamiento y alojamiento en la nube [1].</p> <p></p>"},{"location":"baas/#diferencias-entre-baas-paas-y-saas","title":"Diferencias entre BaaS, PaaS y SaaS \ud83e\ude9e","text":"<ul> <li>BaaS: Se centra en proporcionar servicios de backend como bases de datos, autenticaci\u00f3n y almacenamiento.</li> <li>PaaS: Proporciona una plataforma completa para desarrollar, ejecutar y gestionar aplicaciones sin preocuparse por la infraestructura subyacente.</li> <li>SaaS: Ofrece aplicaciones completas a trav\u00e9s de internet, como CRM o software de contabilidad.</li> </ul>"},{"location":"baas/#servicios-backend-as-a-service-baas","title":"Servicios Backend as a Service (BaaS) \ud83d\udccb","text":"<p>1\ufe0f\u20e3 Firebase \ud83d\udccc</p> <p>\u2705 Autenticaci\u00f3n, bases de datos en tiempo real y almacenamiento en la nube.</p> <p>\u2705 Ideal para apps m\u00f3viles y web.</p> <p></p> <p>2\ufe0f\u20e3 Supabase \ud83d\udccc</p> <p>\u2705 Alternativa open-source a Firebase con PostgreSQL y autenticaci\u00f3n integrada.  </p> <p>\u2705 Recomendado para proyectos que necesitan flexibilidad. </p> <p>3\ufe0f\u20e3 Appwrite \ud83d\udccc  </p> <p>\u2705 Herramientas para autenticaci\u00f3n, bases de datos y almacenamiento de archivos. </p> <p>\u2705 Compatible con m\u00faltiples lenguajes (JavaScript, Python, etc.).    </p> <p>4\ufe0f\u20e3 Back4App \ud83d\udccc  </p> <p>\u2705 Basado en Parse, permite crear backends sin c\u00f3digo.  </p> <p>\u2705 \u00datil para aplicaciones complejas.    </p> <p>5\ufe0f\u20e3 AWS Amplify \ud83d\udccc</p> <p>\u2705 Servicio de Amazon para apps escalables con autenticaci\u00f3n y APIs.  </p> <p>\u2705 Integrado con servicios AWS como S3 y Lambda.    </p>"},{"location":"bibliography/","title":"Bibliograf\u00eda","text":"<p>[1] Cloudflare, \u201c\u00bfQu\u00e9 es BaaS? | Backend como servicio vs. sin servidor,\u201d Cloudflare, [En l\u00ednea]. Disponible en: https://www.cloudflare.com/es-es/learning/serverless/glossary/backend-as-a-service-baas/ [Accedido: 09 abr. 2025].</p> <p>[2] Aplyca, \u201cSupabase: una alternativa \u00e1gil de c\u00f3digo abierto,\u201d Aplyca Blog, [En l\u00ednea]. Disponible en: https://www.aplyca.com/blog/blog-supabase-una-alternativa-agil-de-codigo-abierto [Accedido: 09 abr. 2025].</p> <p>[3] Back4App, \u201cIoT Backend as a Service,\u201d Back4App Blog, [En l\u00ednea]. Disponible en: https://blog.back4app.com/iot-backend-as-a-service/ [Accedido: 09 abr. 2025].</p> <p>[4] Supabase, \"Database\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/database [Accedido: 09 abr. 2025].</p> <p>[5] Supabase, \"Auth\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/auth [Accedido: 09 abr. 2025].</p> <p>[6] Supabase, \"Storage\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/storage [Accedido: 09 abr. 2025].</p> <p>[7] Supabase, \"Edge Functions\" Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/functions [Accedido: 09 abr. 2025].</p> <p>[8] Supabase, \"Realtime\" Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/realtime [Accedido: 09 abr. 2025].</p> <p>[9] Supabase, \"Broadcast\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/realtime/broadcast [Accedido: 09 abr. 2025].</p> <p>[10] Supabase, \"Presence\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/realtime/presence [Accedido: 09 abr. 2025].</p> <p>[11] Supabase, \"Postgres Changes\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/realtime/postgres-changes [Accedido: 09 abr. 2025].</p> <p>[12] Supabase, \u201cArchitecture\u201d Supabase Docs, [En l\u00ednea]. Disponible en: https://supabase.com/docs/guides/getting-started/architecture [Accedido: 09 abr. 2025].</p> <p>[13] Pipedream, \u201cIntegrate the Adafruit IO API with the Supabase API,\u201d Pipedream. [En l\u00ednea]. Disponible: https://pipedream.com/apps/adafruit-io/integrations/supabase. [Accedido: 09 abr. 2025].</p> <p>[14] W3Schools, \u201cSQL Tutorial,\u201d W3Schools. [En l\u00ednea]. Disponible: https://www.w3schools.com/sql/. [Accedido: 09 abr. 2025].</p>"},{"location":"database_concepts/","title":"Conceptos de Base de Datos Relacional","text":"<p>Al utilizar Supabase \u2014que se basa en PostgreSQL\u2014, es fundamental comprender y aplicar varios conceptos cl\u00e1sicos de bases de datos relacionales para garantizar la eficiencia, integridad y escalabilidad de las aplicaciones. A continuaci\u00f3n se detallan algunos de los conceptos clave a considerar:</p>"},{"location":"database_concepts/#modelo-relacional-y-normalizacion","title":"Modelo Relacional y Normalizaci\u00f3n \ud83d\udcca\u2699\ufe0f","text":"<p>Organizar los datos en tablas relacionadas y aplicar t\u00e9cnicas de normalizaci\u00f3n (por ejemplo, hasta la tercera forma normal) ayuda a minimizar la redundancia y mantener la coherencia de los datos. La correcta estructura relacional facilita consultas m\u00e1s sencillas y evita inconsistencias [14].</p> <p>\u27a1\ufe0f Ejemplo</p> <p>Datos No Normalizados (Tabla Inicial)</p> <p>Supongamos una tabla pedidos que almacena informaci\u00f3n de ventas:</p> <p></p> <p>\u27a1\ufe0f Problemas:</p> <p>Redundancia: Datos del cliente (email, ciudad) se repiten en m\u00faltiples pedidos.</p> <p>Anomal\u00edas: Si Juan P\u00e9rez cambia de ciudad, hay que actualizar m\u00faltiples registros.</p> <p>Dependencias parciales/transitivas: El Precio depende del Producto, no del ID_Pedido.</p> <p>1\ufe0f\u20e3 Primera Forma Normal (1FN): Valores At\u00f3micos</p> <p>Requisito: Todas las columnas deben tener valores at\u00f3micos (sin listas ni datos compuestos).</p> <p>En este caso, la tabla ya cumple 1FN porque cada celda tiene un solo valor.</p> <p>2\ufe0f\u20e3 Segunda Forma Normal (2FN): Eliminar Dependencias Parciales</p> <p>Requisito: Todas las columnas no clave deben depender completamente de la clave primaria.</p> <p>Problema:</p> <p>\ud83d\udd39La clave primaria compuesta podr\u00eda ser (ID_Pedido, Producto), pero:</p> <p>\ud83d\udd38Precio depende solo de Producto.</p> <p>\ud83d\udd38Cliente, Email_Cliente, y Ciudad_Cliente dependen solo de ID_Pedido.</p> <p>Soluci\u00f3n: </p> <p>Dividir en tablas.</p> <p>Tabla clientes</p> <pre><code>CREATE TABLE clientes (\n    id_cliente INT PRIMARY KEY AUTO_INCREMENT,\n    nombre VARCHAR(100),\n    email VARCHAR(100) UNIQUE,\n    ciudad VARCHAR(100)\n);\n</code></pre> <p>Tabla productos</p> <pre><code>CREATE TABLE productos (\n    id_producto INT PRIMARY KEY AUTO_INCREMENT,\n    nombre VARCHAR(100),\n    precio DECIMAL(10, 2)\n);\n</code></pre> <p>Tabla pedidos</p> <pre><code>CREATE TABLE pedidos (\n    id_pedido INT PRIMARY KEY AUTO_INCREMENT,\n    id_cliente INT,\n    fecha DATE,\n    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)\n);\n</code></pre> <p>Tabla detalle_pedidos</p> <pre><code>CREATE TABLE detalle_pedidos (\n    id_pedido INT,\n    id_producto INT,\n    cantidad INT,\n    PRIMARY KEY (id_pedido, id_producto),\n    FOREIGN KEY (id_pedido) REFERENCES pedidos(id_pedido),\n    FOREIGN KEY (id_producto) REFERENCES productos(id_producto)\n);\n</code></pre> <p>3\ufe0f\u20e3 Tercera Forma Normal (3FN): Eliminar Dependencias Transitivas</p> <p>Requisito: Eliminar atributos que dependan de otros atributos no clave.</p> <p>Problema en clientes:</p> <p>\ud83d\udd39Ciudad_Cliente depende de id_cliente, pero podr\u00eda haber redundancia si muchos clientes comparten la misma ciudad.</p> <p>Soluci\u00f3n: Separar ciudades en una tabla independiente (opcional, pero \u00fatil para evitar duplicados):</p> <p>Tabla ciudades</p> <pre><code>CREATE TABLE ciudades (\n    id_ciudad INT PRIMARY KEY AUTO_INCREMENT,\n    nombre VARCHAR(100) UNIQUE\n);\n</code></pre> <p>Tabla clientes (actualizada)</p> <pre><code>CREATE TABLE clientes (\n    id_cliente INT PRIMARY KEY AUTO_INCREMENT,\n    nombre VARCHAR(100),\n    email VARCHAR(100) UNIQUE,\n    id_ciudad INT,\n    FOREIGN KEY (id_ciudad) REFERENCES ciudades(id_ciudad)\n);\n</code></pre> <p>Estructura Final Normalizada (3FN)</p> <p>1\ufe0f\u20e3 clientes: Almacena datos \u00fanicos de clientes.</p> <p>2\ufe0f\u20e3 productos: Gestiona informaci\u00f3n de productos.</p> <p>3\ufe0f\u20e3 pedidos: Relaciona clientes con pedidos.</p> <p>4\ufe0f\u20e3 detalle_pedidos: Detalla productos por pedido.</p> <p>5\ufe0f\u20e3 ciudades: Evita duplicar nombres de ciudades.</p> <p>\u27a1\ufe0f Ejemplo de Inserci\u00f3n de Datos</p> <pre><code>-- Insertar ciudades\nINSERT INTO ciudades (nombre) VALUES ('Madrid'), ('Barcelona');\n\n-- Insertar clientes\nINSERT INTO clientes (nombre, email, id_ciudad)\nVALUES ('Juan P\u00e9rez', 'juan@example.com', 1),\n    ('Ana G\u00f3mez', 'ana@example.com', 2);\n\n-- Insertar productos\nINSERT INTO productos (nombre, precio)\nVALUES ('Camiseta', 20.00),\n    ('Pantal\u00f3n', 35.00),\n    ('Zapatos', 50.00);\n\n-- Insertar pedidos\nINSERT INTO pedidos (id_cliente, fecha) VALUES (1, '2024-01-10'), (2, '2024-01-11'), (1, '2024-01-12');\n\n-- Detalle de pedidos\nINSERT INTO detalle_pedidos (id_pedido, id_producto, cantidad)\nVALUES (1, 1, 2),  -- Pedido 1: 2 camisetas\n    (2, 2, 1),  -- Pedido 2: 1 pantal\u00f3n\n    (3, 3, 1);  -- Pedido 3: 1 zapato\n</code></pre> <p>Ventajas de la Normalizaci\u00f3n</p> <p>\ud83d\udd39 Menos redundancia: Datos como email o precio no se repiten.</p> <p>\ud83d\udd39 Integridad: Actualizar una ciudad en ciudades afecta a todos los clientes relacionados.</p> <p>\ud83d\udd39 Consultas eficientes: JOINs sencillos entre tablas.</p> <p>Ejemplo de consulta para obtener todos los pedidos de Juan P\u00e9rez:</p> <pre><code>SELECT p.id_pedido, pr.nombre AS producto, d.cantidad, pr.precio\nFROM pedidos p\nJOIN clientes c ON p.id_cliente = c.id_cliente\nJOIN detalle_pedidos d ON p.id_pedido = d.id_pedido\nJOIN productos pr ON d.id_producto = pr.id_producto\nWHERE c.nombre = 'Juan P\u00e9rez';\n</code></pre>"},{"location":"database_concepts/#claves-primarias-y-foraneas","title":"Claves Primarias y For\u00e1neas \ud83d\udd11\ud83d\udd17","text":"<p>Las claves primarias identifican de forma \u00fanica cada registro de una tabla, mientras que las claves for\u00e1neas establecen las relaciones entre tablas, permitiendo que la integridad referencial se mantenga en el sistema. Esto es crucial para garantizar que las relaciones entre los distintos conjuntos de datos sean v\u00e1lidas.</p> <p>\u27a1\ufe0f Ejemplo: Tabla de Usuarios</p> <p>Supongamos una tabla llamada usuarios que almacena informaci\u00f3n de usuarios:</p> <pre><code>CREATE TABLE usuarios (\n    user_id INT PRIMARY KEY,       -- Clave primaria\n    email VARCHAR(100) UNIQUE,     -- Clave secundaria (candidata)\n    nombre VARCHAR(50),\n    telefono VARCHAR(15) UNIQUE    -- Otra clave secundaria (candidata)\n);\n</code></pre> <p>\u27a1\ufe0f Ejemplo de uso:</p> <pre><code>-- Insertar un usuario (user_id es obligatorio y \u00fanico)\nINSERT INTO usuarios (user_id, email, nombre, telefono)\nVALUES (1, 'juan@example.com', 'Juan', '123-456-789');\n\n-- Esto fallar\u00eda (user_id duplicado):\nINSERT INTO usuarios (user_id, email, nombre) \nVALUES (1, 'maria@example.com', 'Mar\u00eda');\n\n-- Esto tambi\u00e9n fallar\u00eda (email duplicado):\nINSERT INTO usuarios (user_id, email, nombre) \nVALUES (2, 'juan@example.com', 'Mar\u00eda');\n</code></pre>"},{"location":"database_concepts/#restricciones-constraints","title":"Restricciones (Constraints) \ud83d\udeab\u270b\ud83c\udffc","text":"<p>El uso de restricciones como UNIQUE, NOT NULL, CHECK y PRIMARY KEY es vital para asegurar la validez y precisi\u00f3n de los datos almacenados. Estas restricciones ayudan a prevenir la inserci\u00f3n de datos err\u00f3neos o inconsistentes.</p> <p>Ejemplo de Restricciones en SQL</p> <pre><code>-- Crear una tabla de usuarios con restricciones\nCREATE TABLE usuarios (\n    id_usuario INT PRIMARY KEY AUTO_INCREMENT,  -- Clave primaria \u00fanica y autoincremental\n    nombre VARCHAR(50) NOT NULL,                -- No permite valores nulos\n    email VARCHAR(100) UNIQUE NOT NULL,         -- Debe ser \u00fanico y no nulo\n    edad INT CHECK (edad &gt; 0),                 -- Edad debe ser mayor a 0\n    rol VARCHAR(20) DEFAULT 'usuario'          -- Valor por defecto y restricci\u00f3n de valores\n        CHECK (rol IN ('admin', 'editor', 'usuario'))\n);\n</code></pre> <p>Explicaci\u00f3n de las restricciones:</p> <p>1\ufe0f\u20e3 PRIMARY KEY (id_usuario):</p> <p>\ud83d\udd39Identifica cada registro de forma \u00fanica.</p> <p>\ud83d\udd39No permite valores duplicados ni NULL.</p> <p>\ud83d\udd39Autoincremental: Genera un ID autom\u00e1ticamente al insertar un nuevo usuario.</p> <p>2\ufe0f\u20e3 NOT NULL (nombre, email):</p> <p>\ud83d\udd39Obliga a que estos campos siempre tengan un valor .</p> <p>\ud83d\udd39Ejemplo: No puedes insertar un usuario sin nombre o email.</p> <p>3\ufe0f\u20e3 UNIQUE (email):</p> <p>\ud83d\udd39Asegura que no haya emails duplicados en la tabla.</p> <p>\ud83d\udd39Si intentas registrar el mismo email dos veces, la base de datos lanzar\u00e1 un error.</p> <p>4\ufe0f\u20e3 CHECK (edad &gt; 0):</p> <p>\ud83d\udd39Valida que la edad sea un n\u00famero positivo.</p> <p>\ud83d\udd39Ejemplo: edad = -5 generar\u00eda un error.</p> <p>5\ufe0f\u20e3 CHECK + DEFAULT (rol):</p> <p>\ud83d\udd39Define valores permitidos para rol (solo 'admin', 'editor' o 'usuario').</p> <p>\ud83d\udd39Si no se especifica un rol, se asigna 'usuario' por defecto.</p>"},{"location":"database_concepts/#integridad-referencial","title":"Integridad Referencial \ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c\udffc\ud83e\udde9","text":"<p>Se debe asegurar mediante el uso de claves for\u00e1neas que los datos relacionados sean consistentes entre s\u00ed. Esto previene, por ejemplo, que se elimine un registro de una tabla padre cuando existen registros relacionados en una tabla hija, a menos que se establezca una acci\u00f3n en cascada.</p> <p>\u27a1\ufe0f Ejemplo: Clientes y Pedidos</p> <p>Supongamos dos tablas: clientes (padre) y pedidos (hija).</p> <p>La tabla pedidos tendr\u00e1 una clave for\u00e1nea que referencia a clientes.</p> <p>1\ufe0f\u20e3 Crear tabla clientes (padre):</p> <pre><code>    CREATE TABLE clientes (\n        id_cliente INT PRIMARY KEY AUTO_INCREMENT,\n        nombre VARCHAR(50) NOT NULL\n    );\n</code></pre> <p>2\ufe0f\u20e3 Crear tabla pedidos (hija) con clave for\u00e1nea:</p> <pre><code>CREATE TABLE pedidos (\n    id_pedido INT PRIMARY KEY AUTO_INCREMENT,\n    descripcion VARCHAR(100),\n    id_cliente INT,\n    FOREIGN KEY (id_cliente) \n        REFERENCES clientes(id_cliente)\n        ON DELETE CASCADE  -- Acci\u00f3n en cascada al eliminar\n        ON UPDATE CASCADE  -- Acci\u00f3n en cascada al actualizar\n);\n</code></pre> <p>Explicaci\u00f3n de las acciones:</p> <p>\ud83d\udd39FOREIGN KEY (id_cliente):</p> <p>\ud83d\udd38La columna id_cliente en pedidos debe existir en la tabla clientes.</p> <p>\ud83d\udd38Esto evita que se inserten pedidos con un id_cliente inv\u00e1lido.</p> <p>\ud83d\udd39ON DELETE CASCADE:</p> <p>\ud83d\udd38Si se elimina un cliente de la tabla clientes, todos sus pedidos se eliminan autom\u00e1ticamente.</p> <p>\ud83d\udd38Esto mantiene la consistencia: no habr\u00e1 pedidos \"hu\u00e9rfanos\".</p> <p>\ud83d\udd39ON UPDATE CASCADE:</p> <p>\ud83d\udd38Si se actualiza el id_cliente en la tabla clientes, los cambios se propagan autom\u00e1ticamente a la tabla pedidos.</p> <p>\u27a1\ufe0f Ejemplos de operaciones</p> <p>Inserci\u00f3n v\u00e1lida:</p> <pre><code>-- Insertar un cliente\nINSERT INTO clientes (nombre) VALUES ('Juan P\u00e9rez');\n\n-- Insertar un pedido vinculado al cliente (id_cliente = 1)\nINSERT INTO pedidos (descripcion, id_cliente) \nVALUES ('Pedido de camiseta', 1);  -- \u00a1V\u00e1lido!\n</code></pre> <p>Inserci\u00f3n inv\u00e1lida (falla por integridad referencial):</p> <pre><code>-- Intentar insertar un pedido con id_cliente = 99 (no existe)\nINSERT INTO pedidos (descripcion, id_cliente) \nVALUES ('Pedido inv\u00e1lido', 99);  -- Error: No se puede insertar.\n</code></pre> <p>Eliminaci\u00f3n con cascada:</p> <pre><code>-- Eliminar al cliente con id_cliente = 1\nDELETE FROM clientes WHERE id_cliente = 1;\n\n-- Resultado: \n-- - El cliente se elimina de `clientes`.\n-- - Todos sus pedidos se eliminan autom\u00e1ticamente de `pedidos`.\n</code></pre> <p>Actualizaci\u00f3n con cascada:</p> <pre><code>-- Actualizar el id_cliente de Juan P\u00e9rez (de 1 a 100)\nUPDATE clientes SET id_cliente = 100 WHERE id_cliente = 1;\n\n-- Resultado: \n-- - El cliente ahora tiene id_cliente = 100.\n-- - Los pedidos asociados tambi\u00e9n actualizan su `id_cliente` a 100.\n</code></pre> <p>\u27a1\ufe0f \u00bfQu\u00e9 sucede sin integridad referencial?</p> <p>Si no existiera la clave for\u00e1nea:</p> <p>\ud83d\udd39Podr\u00edas insertar pedidos con id_cliente inexistente.</p> <p>\ud83d\udd39Al eliminar un cliente, sus pedidos quedar\u00edan \"hu\u00e9rfanos\" (inconsistentes).</p>"},{"location":"database_concepts/#transacciones-y-cumplimiento-de-las-propiedades-acid","title":"Transacciones y Cumplimiento de las Propiedades ACID \ud83e\udd47\ud83e\udd48","text":"<p>Las transacciones son un pilar fundamental en sistemas de bases de datos relacionales, ya que garantizan que operaciones complejas se ejecuten de manera confiable y segura , incluso en entornos con m\u00faltiples usuarios o procesos concurrentes. Las propiedades ACID (Atomicidad, Consistencia, Aislamiento y Durabilidad) son el marco que asegura esta confiabilidad.</p> <p></p> <p>\u27a1\ufe0f \u00bfPor qu\u00e9 ACID es crucial en sistemas reales?</p> <p>\ud83d\udd39Operaciones complejas:</p> <p>En aplicaciones como banca, e-commerce o IoT, donde operaciones multietapa (ej: reservar un producto, descontar inventario, generar factura) deben ser indivisibles.</p> <p>\ud83d\udd39Entornos concurrentes:</p> <p>En sistemas con m\u00faltiples usuarios o dispositivos IoT actualizando datos simult\u00e1neamente, el aislamiento evita inconsistencias.</p> <p>\ud83d\udd39Recuperaci\u00f3n ante fallos:</p> <p>La durabilidad garantiza que, incluso despu\u00e9s de un desastre, los datos est\u00e9n intactos y recuperables.</p> <p>\u27a1\ufe0f Consecuencias de Ignorar ACID</p> <p>\ud83d\udd39Inconsistencia: </p> <p>Datos corruptos o violaciones de reglas de negocio.</p> <p>\ud83d\udd39P\u00e9rdida de datos:</p> <p>Cambios no guardados tras un fallo.</p> <p>\ud83d\udd39Condiciones de carrera: </p> <p>Resultados impredecibles en sistemas concurrentes.</p> <p>\u27a1\ufe0f ACID en Tecnolog\u00edas Modernas</p> <p>Bases de datos relacionales (MySQL, PostgreSQL): </p> <p>\ud83d\udd39Cumplen ACID por dise\u00f1o.</p> <p>Bases de datos NoSQL: </p> <p>\ud83d\udd39Algunas (ej: MongoDB) ofrecen ACID parcial o en transacciones limitadas.</p> <p>IoT y sistemas distribuidos: </p> <p>\ud83d\udd39Herramientas como Supabase o CockroachDB implementan ACID para garantizar coherencia en datos distribuidos.</p> <p>\u00a1Las propiedades ACID son la base para construir sistemas robustos y confiables! </p>"},{"location":"database_concepts/#indices","title":"\u00cdndices \ud83d\udd0d\ud83d\udd16","text":"<p>La creaci\u00f3n de \u00edndices sobre las columnas m\u00e1s consultadas mejora significativamente el rendimiento de las consultas, facilitando b\u00fasquedas y operaciones JOIN en grandes vol\u00famenes de datos. Sin embargo, se debe equilibrar el n\u00famero de \u00edndices ya que un exceso puede afectar el rendimiento de las operaciones de escritura.</p> <p>\u27a1\ufe0f Ejemplo: Tabla usuarios</p> <p>Supongamos una tabla con informaci\u00f3n de usuarios:</p> <pre><code>CREATE TABLE usuarios (\n    id_usuario INT PRIMARY KEY AUTO_INCREMENT,\n    nombre VARCHAR(50),\n    email VARCHAR(100),\n    fecha_registro DATE\n);\n</code></pre> <p>1\ufe0f\u20e3 Crear un \u00edndice en una columna frecuentemente consultada</p> <p>En caso de realizar muchas b\u00fasquedas por email, crear un \u00edndice acelerar\u00e1 estas consultas:</p> <pre><code>-- Crear un \u00edndice en la columna 'email'\nCREATE INDEX idx_email ON usuarios(email);\n</code></pre> <p>Beneficio:</p> <p>\ud83d\udd39La consulta SELECT * FROM usuarios WHERE email = 'juan@example.com'; ser\u00e1 m\u00e1s r\u00e1pida , ya que el \u00edndice permite buscar el valor directamente, en lugar de escanear toda la tabla</p> <p>2\ufe0f \u00cdndice compuesto para consultas con m\u00faltiples columnas</p> <p>Si se suele filtrar por nombre y fecha_registro al mismo tiempo:</p> <pre><code>-- Crear un \u00edndice compuesto en 'nombre' y 'fecha_registro'\nCREATE INDEX idx_nombre_fecha ON usuarios(nombre, fecha_registro);\n</code></pre> <p>Beneficio:</p> <p>\ud83d\udd39La consulta SELECT * FROM usuarios WHERE nombre = 'Juan' AND fecha_registro &gt; '2023-01-01'; usar\u00e1 este \u00edndice para mayor eficiencia.</p> <p>3\ufe0f\u20e3 \u00bfCu\u00e1ndo evitar \u00edndices?</p> <p>\ud83d\udd39En columnas con pocos valores \u00fanicos (ej: g\u00e9nero: 'M'/'F'), ya que el \u00edndice no aporta ventajas.</p> <p>\ud83d\udd39En tablas con muchas escrituras (INSERT/UPDATE/DELETE) , ya que los \u00edndices ralentizan estas operaciones (el motor debe actualizar el \u00edndice cada vez).</p> <p>4\ufe0f\u20e3 Eliminar un \u00edndice innecesario</p> <p>Si un \u00edndice no se usa o perjudica el rendimiento, es posible eliminarlo:</p> <pre><code>DROP INDEX idx_nombre_fecha ON usuarios;\n</code></pre>"},{"location":"database_concepts/#consultas-sql-y-vistas","title":"Consultas SQL y Vistas \ud83d\udcdc\u2753","text":"<p>Comprender el lenguaje SQL es esencial para definir consultas m\u00e1s eficientes. Asimismo, el uso de vistas (views) permite encapsular l\u00f3gica de consulta compleja, simplificando el acceso a conjuntos de datos predefinidos y mejorando la seguridad mediante la exposici\u00f3n limitada de la estructura subyacente.</p> <p>Ejemplo: Gesti\u00f3n de Ventas</p> <p>Supongamos una base de datos con dos tablas: productos y ventas.</p> <p>1\ufe0f\u20e3 Crear tablas:</p> <pre><code>-- Tabla de productos\nCREATE TABLE productos (\n    id_producto INT PRIMARY KEY,\n    nombre VARCHAR(50),\n    precio DECIMAL(10,2)\n);\n\n-- Tabla de ventas\nCREATE TABLE ventas (\n    id_venta INT PRIMARY KEY,\n    id_producto INT,\n    cantidad INT,\n    fecha DATE,\n    FOREIGN KEY (id_producto) REFERENCES productos(id_producto)\n);\n</code></pre> <p>2\ufe0f\u20e3 Insertar datos de ejemplo:</p> <pre><code>-- Productos\nINSERT INTO productos VALUES \n(1, 'Camiseta', 20.00),\n(2, 'Pantal\u00f3n', 35.00);\n\n-- Ventas\nINSERT INTO ventas VALUES \n(101, 1, 2, '2024-01-10'),\n(102, 2, 1, '2024-01-11');\n</code></pre> <p>3\ufe0f\u20e3 Consulta SQL compleja</p> <p>Supongamos que queremos un reporte de ventas con el total ganado por producto:</p> <pre><code>SELECT \n    p.nombre AS producto,\n    SUM(v.cantidad) AS total_vendido,\n    SUM(p.precio * v.cantidad) AS ingresos_totales\nFROM ventas v\nJOIN productos p ON v.id_producto = p.id_producto\nGROUP BY p.nombre;\n</code></pre> <p>Resultado:</p> <pre><code>| producto  | total_vendido | ingresos_totales |\n|-----------|---------------|------------------|\n| Camiseta  | 2             | 40.00            |\n| Pantal\u00f3n  | 1             | 35.00            |\n</code></pre> <p>4\ufe0f\u20e3 Crear una vista para simplificar</p> <p>La consulta anterior es \u00fatil, pero repetitiva. Podemos encapsularla en una vista:</p> <pre><code>CREATE VIEW reporte_ventas AS\nSELECT \n    p.nombre AS producto,\n    SUM(v.cantidad) AS total_vendido,\n    SUM(p.precio * v.cantidad) AS ingresos_totales\nFROM ventas v\nJOIN productos p ON v.id_producto = p.id_producto\nGROUP BY p.nombre;\n</code></pre> <p>5\ufe0f\u20e3 Usar la vista</p> <p>Ahora, en lugar de escribir la consulta completa, simplemente:</p> <pre><code>SELECT * FROM reporte_ventas;\n</code></pre> <p>Beneficios de la vista:</p> <p>\ud83d\udd39Simplifica el acceso:</p> <p>Los usuarios no necesitan conocer la l\u00f3gica interna.</p> <p>\ud83d\udd39Seguridad: </p> <p>Puedes otorgar permisos solo a la vista, ocultando las tablas originales.</p> <p>\ud83d\udd39Mantenimiento:</p> <p>Si cambia la estructura de las tablas, solo se actualiza la vista.</p> <p>6\ufe0f\u20e3 Ejemplo de seguridad con vistas</p> <p>Imaginemos que queremos que un usuario solo vea ventas del 2024 sin acceso a la tabla ventas:</p> <pre><code>CREATE VIEW ventas_2024 AS\nSELECT * FROM ventas\nWHERE fecha BETWEEN '2024-01-01' AND '2024-12-31';\n</code></pre> <p>Ahora, el usuario puede consultar ventas_2024 sin ver datos anteriores o futuros.</p>"},{"location":"database_concepts/#triggers-y-procedimientos-almacenados","title":"Triggers y Procedimientos Almacenados \ud83d\udca5\u26d3\ufe0f","text":"<p>Los triggers permiten ejecutar c\u00f3digo de forma autom\u00e1tica ante ciertos eventos (como inserciones, actualizaciones o eliminaciones), mientras que los procedimientos almacenados encapsulan la l\u00f3gica de negocio directamente en la base de datos, lo que puede mejorar el rendimiento y la seguridad al centralizar operaciones cr\u00edticas.</p> <p>\u27a1\ufe0f Ejemplo</p> <p>Gestionamos una tabla productos y queremos:</p> <ol> <li> <p>Auditar cambios de precios usando un trigger.</p> </li> <li> <p>Insertar productos con validaci\u00f3n usando un procedimiento almacenado.</p> </li> </ol> <p>1\ufe0f\u20e3 Crear tabla productos</p> <pre><code>    CREATE TABLE productos (\n        id_producto INT PRIMARY KEY AUTO_INCREMENT,\n        nombre VARCHAR(50),\n        precio DECIMAL(10, 2),\n        stock INT\n    );\n</code></pre> <p>2\ufe0f\u20e3 Crear tabla de auditor\u00eda</p> <pre><code>    CREATE TABLE auditoria_precios (\n        id_auditoria INT PRIMARY KEY AUTO_INCREMENT,\n        id_producto INT,\n        precio_anterior DECIMAL(10, 2),\n        precio_nuevo DECIMAL(10, 2),\n        fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );\n</code></pre> <p>3\ufe0f\u20e3 Ejemplo de Trigger</p> <p>Trigger: Registra cambios de precio en auditoria_precios despu\u00e9s de una actualizaci\u00f3n.</p> <pre><code>    DELIMITER $$\n\n    CREATE TRIGGER tr_actualizar_precio\n    AFTER UPDATE ON productos\n    FOR EACH ROW\n    BEGIN\n        IF OLD.precio &lt;&gt; NEW.precio THEN\n            INSERT INTO auditoria_precios (id_producto, precio_anterior, precio_nuevo)\n            VALUES (OLD.id_producto, OLD.precio, NEW.precio);\n        END IF;\n    END$$\n\n    DELIMITER;\n</code></pre> <p>\u00bfQu\u00e9 hace?</p> <p>\ud83d\udd39Se activa despu\u00e9s de una actualizaci\u00f3n (AFTER UPDATE).</p> <p>\ud83d\udd39Compara el precio anterior (OLD.precio) con el nuevo (NEW.precio).</p> <p>\ud83d\udd39Si hay cambios, inserta un registro en auditoria_precios.</p> <p>4\ufe0f\u20e3 Ejemplo de Procedimiento Almacenado</p> <p>Procedimiento: Inserta un nuevo producto con validaciones de precio y stock.</p> <pre><code>    DELIMITER $$\n\n    CREATE PROCEDURE InsertarProducto(\n        IN p_nombre VARCHAR(50),\n        IN p_precio DECIMAL(10, 2),\n        IN p_stock INT\n    )\n    BEGIN\n        -- Validar precio positivo\n        IF p_precio &lt;= 0 THEN\n            SIGNAL SQLSTATE '45000' \n                SET MESSAGE_TEXT = 'Error: El precio debe ser mayor a 0';\n        END IF;\n\n        -- Validar stock no negativo\n        IF p_stock &lt; 0 THEN\n            SIGNAL SQLSTATE '45000' \n                SET MESSAGE_TEXT = 'Error: El stock no puede ser negativo';\n        END IF;\n\n        -- Insertar producto si pasa las validaciones\n        INSERT INTO productos (nombre, precio, stock)\n        VALUES (p_nombre, p_precio, p_stock);\n    END$$\n\n    DELIMITER;\n</code></pre> <p>\u00bfQu\u00e9 hace?</p> <p>\ud83d\udd39Recibe par\u00e1metros (p_nombre, p_precio, p_stock).</p> <p>\ud83d\udd39Valida que el precio sea positivo y el stock no negativo.</p> <p>\ud83d\udd39Si hay errores, lanza un mensaje (SIGNAL SQLSTATE).</p> <p>\ud83d\udd39Si todo es v\u00e1lido, inserta el producto.</p> <p>5\ufe0f\u20e3 Uso en la pr\u00e1ctica</p> <p>Ejecutar el procedimiento almacenado:</p> <pre><code>-- Insertar un producto v\u00e1lido\nCALL InsertarProducto('Camiseta', 20.00, 100);\n\n-- Intentar insertar un producto con precio inv\u00e1lido\nCALL InsertarProducto('Pantal\u00f3n', -5.00, 50);  -- \u00a1Falla! (precio negativo)\n</code></pre> <p>Ver el trigger en acci\u00f3n:</p> <pre><code>-- Actualizar el precio de un producto\nUPDATE productos SET precio = 25.00 WHERE id_producto = 1;\n\n-- Verificar la auditor\u00eda\nSELECT * FROM auditoria_precios;\n</code></pre> <p>Resultado en auditoria_precios:</p> <pre><code>| id_auditoria | id_producto | precio_anterior | precio_nuevo | fecha_cambio       |\n|--------------|-------------|-----------------|--------------|--------------------|\n| 1            | 1           | 20.00           | 25.00        | 2024-01-10 12:34:56|\n</code></pre> <p>\u27a1\ufe0f Beneficios</p> <p>1\ufe0f\u20e3 Triggers:</p> <p>\ud83d\udd39Automatizan tareas como auditor\u00edas o c\u00e1lculos sin intervenci\u00f3n manual.</p> <p>\ud83d\udd39Garantizan que ciertas reglas se cumplan siempre , incluso si los cambios ocurren desde m\u00faltiples aplicaciones.</p> <p>2\ufe0f\u20e3 Procedimientos almacenados:</p> <p>\ud83d\udd39Centralizan la l\u00f3gica de negocio en la base de datos, evitando duplicar c\u00f3digo en aplicaciones.</p> <p>\ud83d\udd39Mejoran la seguridad al limitar el acceso directo a las tablas (los usuarios solo ejecutan procedimientos).</p> <p>\ud83d\udd39Reducen el tr\u00e1fico de red al ejecutar operaciones complejas en el servidor.</p>"},{"location":"database_concepts/#seguridad-a-nivel-de-fila-row-level-security-rls","title":"Seguridad a Nivel de Fila (Row Level Security, RLS) \ud83d\udee1\ufe0f\ud83d\udd12","text":"<p>Un aspecto destacable en Supabase es su capacidad para implementar RLS, que permite definir pol\u00edticas de seguridad en funci\u00f3n del usuario autenticado. Esto es crucial en aplicaciones donde se requiere que cada usuario acceda \u00fanicamente a los datos autorizados, garantizando una capa adicional de protecci\u00f3n.</p> <p>Ejemplo</p> <p>Una tabla documentos donde cada usuario solo puede acceder a sus propios archivos.</p> <p>1\ufe0f\u20e3 Crear la tabla</p> <pre><code>CREATE TABLE documentos (\n    id SERIAL PRIMARY KEY,\n    nombre VARCHAR(100),\n    contenido TEXT,\n    user_id UUID NOT NULL REFERENCES auth.users(id)  -- Vincula con el usuario autenticado\n);\n</code></pre> <p>2\ufe0f\u20e3 Habilitar RLS en la tabla</p> <pre><code>ALTER TABLE documentos ENABLE ROW LEVEL SECURITY;\n</code></pre> <p>3\ufe0f\u20e3 Crear pol\u00edticas de seguridad</p> <p>\ud83d\udd39Pol\u00edtica para SELECT:</p> <p>Solo permite leer documentos del usuario autenticado.</p> <pre><code>CREATE POLICY \"Usuarios solo ven sus documentos\"\nON documentos\nFOR SELECT\nUSING (auth.uid() = user_id);  -- 'auth.uid()' obtiene el ID del usuario logueado\n</code></pre> <p>\ud83d\udd39Pol\u00edtica para INSERT:</p> <p>Solo permite insertar documentos si el user_id coincide con el usuario autenticado.</p> <pre><code>CREATE POLICY \"Usuarios solo insertan sus propios documentos\"\nON documentos\nFOR INSERT\nWITH CHECK (auth.uid() = user_id);\n</code></pre> <p>\ud83d\udd39Pol\u00edtica para UPDATE/DELETE:</p> <p>Solo permite modificar/eliminar documentos propios.</p> <pre><code>CREATE POLICY \"Usuarios solo editan/eliminan sus documentos\"\nON documentos\nFOR UPDATE\nUSING (auth.uid() = user_id);\n\nCREATE POLICY \"Usuarios solo eliminan sus documentos\"\nON documentos\nFOR DELETE\nUSING (auth.uid() = user_id);\n</code></pre> <p>4\ufe0f\u20e3 Ejemplo de uso</p> <p>Insertar un documento (como usuario autenticado):</p> <p>Supongamos que el usuario con user_id = '123e4567...' est\u00e1 logueado:</p> <pre><code>INSERT INTO documentos (nombre, contenido, user_id)\nVALUES ('Reporte 2024', 'Contenido del reporte...', auth.uid());\n</code></pre> <p>Consultar documentos:</p> <pre><code>SELECT * FROM documentos;  -- \u00a1Solo devuelve documentos del usuario logueado!\n</code></pre> <p>\u27a1\ufe0f \u00bfQu\u00e9 sucede sin RLS?</p> <p>\ud83d\udd39Sin RLS, un usuario autenticado podr\u00eda acceder a todos los documentos de la tabla.</p> <p>\ud83d\udd39Con RLS, incluso si un usuario intenta acceder a datos ajenos (ej: mediante una API maliciosa), la pol\u00edtica bloquea el acceso.</p>"},{"location":"database_concepts/#en-resumen","title":"En resumen...","text":"<p>Al usar Supabase, se deben considerar los principios b\u00e1sicos del modelo relacional, la normalizaci\u00f3n, la gesti\u00f3n adecuada de claves y restricciones, el dise\u00f1o eficiente de consultas e \u00edndices, as\u00ed como el uso de mecanismos adicionales de seguridad y automatizaci\u00f3n mediante triggers y procedimientos almacenados. Todo esto asegura que la base de datos sea robusta, eficiente y segura para manejar aplicaciones modernas.</p>"},{"location":"iot_integration/","title":"Integraci\u00f3n del BaaS y Supabase con IoT","text":""},{"location":"iot_integration/#porque-el-internet-de-las-cosas-iot-es-tan-importante","title":"\u00bfPorqu\u00e9 el Internet de las Cosas (IoT) es tan importante?","text":"<p>El Internet de las Cosas (IoT) se ha consolidado como una de las tecnolog\u00edas m\u00e1s relevantes y sorprendentes de la actualidad. A trav\u00e9s de dispositivos IoT, se establece una conexi\u00f3n con objetos cotidianos, abarcando desde veh\u00edculos y electrodom\u00e9sticos hasta sistemas de vigilancia infantil y termostatos, todo ello mediante dispositivos integrados [3].</p> <p>La red de internet ha facilitado una comunicaci\u00f3n fluida entre procesos, individuos y objetos. Impulsado por la computaci\u00f3n de bajo costo, el an\u00e1lisis de grandes vol\u00famenes de datos, la computaci\u00f3n en la nube y tecnolog\u00edas m\u00f3viles avanzadas, los objetos f\u00edsicos tienen la capacidad de compartir y conectar informaci\u00f3n con una m\u00ednima intervenci\u00f3n humana.</p> <p>En el actual panorama hiperconectado, estos sistemas pueden supervisar, ajustar y registrar cada interacci\u00f3n con los elementos que forman parte de esta red.</p> <p></p>"},{"location":"iot_integration/#ventajas-de-integrar-baas-con-iot","title":"Ventajas de Integrar BaaS con IoT","text":"<p>\u2747\ufe0f Reducci\u00f3n de costos de desarrollo</p> <p>Las soluciones BaaS ofrecen servicios gestionados (como servidores e infraestructura de aplicaciones), lo que permite ahorrar recursos y reducir los gastos asociados al desarrollo.</p> <p>\u2747\ufe0f Tiempo de lanzamiento m\u00e1s r\u00e1pido</p> <p>Con BaaS, los desarrolladores de IoT pueden enfocarse en mejorar la experiencia del usuario, sin preocuparse por aspectos como la administraci\u00f3n de bases de datos, escalabilidad u otras tareas t\u00e9cnicas que retrasan el lanzamiento.</p> <p>\u2747\ufe0f Sin complicaciones de gesti\u00f3n de servidores</p> <p>BaaS se encarga de la infraestructura y configuraci\u00f3n de servidores, eliminando la necesidad de dedicar tiempo y esfuerzo a su mantenimiento. Esto libera a los equipos para priorizar el desarrollo de funcionalidades clave.</p> <p>Supabase puede ser integrado con aplicaciones web que consumen datos de dispositivos IoT mediante sus APIs REST y Realtime.</p> <p>\u2747\ufe0f Lenguaje t\u00e9cnico simplificado:</p> <p>\u2734\ufe0f Gestionado: Servicios administrados por el proveedor (no por el equipo de desarrollo).</p> <p>\u2734\ufe0f Escalabilidad: Capacidad de adaptar recursos seg\u00fan demanda sin esfuerzo manual.</p> <p>\u2734\ufe0f Infraestructura: Entorno t\u00e9cnico (servidores, redes, almacenamiento) necesario para el funcionamiento de una aplicaci\u00f3n.</p>"},{"location":"iot_integration/#integracion-de-supabase-con-una-aplicacion-web-que-consume-datos-de-un-dispositivo-iot","title":"Integraci\u00f3n de Supabase con una aplicaci\u00f3n web que consume datos de un dispositivo IoT","text":"<p>Existen servicios y plataformas (por ejemplo, Pipedream) que facilitan la integraci\u00f3n entre dispositivos IoT y Supabase. Un ejemplo pr\u00e1ctico es la integraci\u00f3n del Adafruit IO API con la API de Supabase, donde Pipedream act\u00faa como intermediario para recibir datos desde el dispositivo IoT y posteriormente insertar o actualizar la base de datos de Supabase, permitiendo que la aplicaci\u00f3n web consuma esos datos de forma inmediata [13].</p> <p></p> <p>\u27a1\ufe0f Descripci\u00f3n general de Adafruit IO</p> <p></p> <p>Adafruit IO es una API dise\u00f1ada para la creaci\u00f3n de aplicaciones del Internet de las Cosas (IoT). Ofrece un medio para almacenar, compartir y gestionar datos provenientes de tus dispositivos IoT. Con Adafruit IO, puedes crear paneles de control para mostrar datos en tiempo real, activar eventos basados en datos e incluso controlar salidas. Es una plataforma vers\u00e1til que es especialmente amigable para aquellos que se inician en el mundo del IoT.</p> <p>\u27a1\ufe0f Conectar Adafruit IO</p> <pre><code>#Python\n\nimport requests\n\ndef handler(pd: \"pipedream\"):\nheaders = {\"X-AIO-Key\": f'{pd.inputs[\"adafruit_io\"][\"$auth\"][\"active_key\"]}'}\nr = requests.get('https://io.adafruit.com/api/v2/user', headers=headers)\n# Export the data for use in future steps\nreturn r.json()\n</code></pre> <p>\u27a1\ufe0f  Conectar Supabase </p> <pre><code>    #Python\n\n    import requests\n\n    def handler(pd: \"pipedream\"):\n    token = f'{pd.inputs[\"supabase\"][\"$auth\"][\"service_key\"]}'\n    authorization = f'Bearer {token}'\n    headers = {\"Authorization\": authorization, \"apikey\": f'{pd.inputs[\"supabase\"][\"$auth\"][\"service_key\"]}'}\n    r = requests.get(f'https://{pd.inputs[\"supabase\"][\"$auth\"][\"subdomain\"]}.supabase.co/rest/v1/', headers=headers)\n    # Export the data for use in future steps\n    return r.json()\n</code></pre>"},{"location":"supabase/","title":"Supabase","text":""},{"location":"supabase/#que-es-supabase","title":"\u00bfQu\u00e9 es Supabase? \ud83c\udfaf","text":"<p>Supabase es una plataforma de Backend as a Service (BaaS) basada en la nube que ofrece a los desarrolladores una variedad de herramientas para construir y administrar servicios backend de manera eficiente [2]</p> <p>Esto permite a los desarrolladores externalizar funciones y acelerar el desarrollo de aplicaciones, sin preocuparse por las tareas del lado del servidor.</p> <p></p> <p>Supabase se presenta como una alternativa de c\u00f3digo abierto a Firebase de Google, destac\u00e1ndose por su interfaz intuitiva. Al estar en la nube, no requiere instalaciones; solo necesitas crear una cuenta para empezar a desarrollar cualquier proyecto.</p> <p>La plataforma proporciona todas las herramientas y servicios de backend necesarios para crear aplicaciones escalables y seguras, incluyendo gesti\u00f3n de bases de datos, autenticaci\u00f3n, almacenamiento de archivos, generaci\u00f3n autom\u00e1tica de APIs y actualizaciones en tiempo real, entre otros.</p>"},{"location":"supabase/#ventajas-de-supabase","title":"Ventajas de Supabase \ud83d\udcc8","text":"<p>La facilidad de uso de la interfaz de Supabase puede traducirse en un ahorro significativo de tiempo y costos al desarrollar una aplicaci\u00f3n. A continuaci\u00f3n, sus ventajas clave:</p> <p>\u2705 C\u00f3digo abierto:</p> <p>Se tiene acceso completo al c\u00f3digo fuente, por lo tanto, este puede ser personalizado seg\u00fan las necesidades espec\u00edficas. </p> <p>\u2705 Comunidad en crecimiento: </p> <p>Cuenta con una comunidad de colaboradores que crece diariamente, donde hay muchos usuarios dispuestos a brindar soporte para encontrar la soluci\u00f3n a cualquier problema.</p> <p>\u2705 Base de Datos Relacional Postgres: </p> <p>Supabase usa PostgreSQL, flexible para apps en tiempo real, con buen soporte para consultas complejas e integraci\u00f3n de datos.</p> <p>\u2705 M\u00faltiples opciones de implementaci\u00f3n: </p> <p>Es posible implementar la aplicaci\u00f3n o servicio en la nube de manera muy f\u00e1cil y r\u00e1pida a trav\u00e9s de su interfaz de l\u00ednea de comandos o utilizando su panel de control.</p> <p>\u2705 No tiene dependencia del proveedor </p> <p>A diferencia de otros BaaS, que pueden sufrir bloqueos por parte de su proveedor, con Supabase este problema no existe, ya que debido a que es de c\u00f3digo abierto, esta no depende de limitaciones de terceros.</p>"},{"location":"supabase/#supabase-como-alternativa-a-firebase","title":"Supabase como alternativa a Firebase \ud83e\udde9","text":"<p>Si bien Supabase ofrece funcionalidades similares a Firebase, como alojamiento, autenticaci\u00f3n y base de datos en tiempo real, existen diferencias cruciales. Supabase destaca por usar PostgreSQL, brindando mayor control de datos con SQL, a diferencia del NoSQL menos adaptable de Firebase. Otro punto clave es que Supabase es open source, permitiendo a los desarrolladores modificarlo completamente, algo restringido en Firebase.</p> <p>Adem\u00e1s, Supabase permite desplegar tu propia instancia en la nube (ej: AWS, DigitalOcean), dando control total sobre los datos y costos. Firebase, en cambio, es un servicio completamente gestionado, lo que limita la personalizaci\u00f3n y encierra al usuario en la infraestructura de Google.</p> <p>En cuanto a la predicci\u00f3n de costos, Firebase suele volverse costoso a medida que la aplicaci\u00f3n escala, especialmente con uso intensivo de bases de datos o almacenamiento. Supabase, al ser autohospedable, ofrece mayor control sobre los gastos operativos. </p> <p>En resumen, aunque tanto Supabase como Firebase buscan simplificar el desarrollo backend, sus diferencias fundamentales en la gesti\u00f3n de bases de datos, la filosof\u00eda de c\u00f3digo abierto y las opciones de despliegue otorgan a Supabase una propuesta de valor distinta, especialmente para aquellos que buscan mayor control, flexibilidad y potencialmente una estructura de costos m\u00e1s predecible a medida que sus proyectos crecen.</p>"},{"location":"supabase/#como-funciona-supabase","title":"\u00bfC\u00f3mo funciona Supabase?\ud83d\udee0\ufe0f","text":"<p>Supabase es una plataforma integral de c\u00f3digo abierto que facilita la creaci\u00f3n de aplicaciones web y m\u00f3viles, ofreciendo diversas herramientas de backend listas para usar. Adem\u00e1s, utiliza una arquitectura de funciones que se ejecutan en la infraestructura de la nube.</p> <p>Su sistema de base de datos se basa en PostgreSQL, una opci\u00f3n relacional de c\u00f3digo abierto reconocida por su fiabilidad y capacidad de crecimiento. A partir de la estructura de estas bases de datos, Supabase genera autom\u00e1ticamente interfaces de programaci\u00f3n (APIs) de tipo REST.</p> <p>Estas APIs permiten que la aplicaci\u00f3n se comunique con la base de datos utilizando formatos comunes como JSON o XML a trav\u00e9s de protocolos web est\u00e1ndar (HTTP/HTTPS). Adicionalmente, proporciona varias formas de autenticar usuarios, como correo electr\u00f3nico y cuentas de plataformas populares como GitHub, GitLab o Google. Tambi\u00e9n ofrece herramientas para definir permisos de acceso a los datos seg\u00fan el tipo de usuario.</p> <p>En cuanto a la conexi\u00f3n con otros servicios, Supabase se puede integrar f\u00e1cilmente con herramientas muy utilizadas como Stripe (para pagos), Slack y Discord (para comunicaci\u00f3n) y GitHub (para desarrollo), entre otras. Esto permite a los desarrolladores a\u00f1adir funcionalidades como procesar pagos, enviar notificaciones o configurar alertas en sus aplicaciones sin necesidad de escribir c\u00f3digo adicional para estas integraciones.</p>"},{"location":"supabase/#servicios-ofrecidos","title":"Servicios Ofrecidos\ud83e\udef4\ud83c\udffc","text":"<ul> <li>Base de Datos: \ud83d\uddc2\ufe0f</li> </ul> <p>Supabase utiliza PostgreSQL, ofreciendo una base de datos relacional potente, con soporte para actualizaciones en tiempo cuasi-real a trav\u00e9s de su servicio de Realtime. Adem\u00e1s, la estructura de las tablas se usa para generar autom\u00e1ticamente una API REST, lo que facilita la interacci\u00f3n directa desde el frontend sin necesidad de escribir una capa adicional de backend [4].</p> <p></p> <p>\u2714\ufe0fCaracteristicas\u2714\ufe0f</p> <p>\u2747\ufe0f Vista de Tabla</p> <p>No se necesita ser un experto en bases de datos para empezar a usar Supabase. La vista de tabla integrada hace que Postgres sea tan f\u00e1cil de usar como una hoja de c\u00e1lculo.</p> <p></p> <p>\u2747\ufe0f Editor SQL</p> <p>Supabase incluye un Editor SQL. Y a su vez, es posible guardar todas las consultas favoritas para ejecutarlas m\u00e1s tarde.</p> <p></p> <ul> <li>Autenticaci\u00f3n: \ud83c\udd94</li> </ul> <p>Supabase Auth facilita la implementaci\u00f3n de autenticaci\u00f3n y autorizaci\u00f3n en las aplicaciones.  Se proporcionan los SDKs de cliente y puntos de conexi\u00f3n de API para ayudar a crear y administrar a los usuarios [5].</p> <p>Los usuarios de Supabase pueden usar muchos m\u00e9todos de autenticaci\u00f3n populares, incluyendo contrase\u00f1a, enlace m\u00e1gico, contrase\u00f1a de un solo uso (OTP), inicio de sesi\u00f3n social e inicio de sesi\u00f3n \u00fanico (SSO).</p> <p>La autenticaci\u00f3n y la autorizaci\u00f3n son las responsabilidades principales de cualquier sistema de autenticaci\u00f3n.</p> <p>Autenticaci\u00f3n significa verificar que un usuario es quien dice ser. \u2705\ud83d\udc64</p> <p>Autorizaci\u00f3n significa verificar a qu\u00e9 recursos se le permite acceder a un usuario. \ud83d\udd12\ud83d\udd11</p> <p>Supabase Auth utiliza JSON Web Tokens (JWTs) para la autenticaci\u00f3n. Auth se integra con las funciones de base de datos de Supabase, lo que facilita el uso de la Seguridad a Nivel de Fila (RLS) para la autorizaci\u00f3n.</p> <p>A continuaci\u00f3n, se muestran las posibles opciones para autenticarse a Supabase a trav\u00e9s de otras plataformas sociales como Facebook, GitLab, GitHub, etc.</p> <p> </p> <ul> <li>Almacenamiento: \ud83d\udcbe</li> </ul> <p>Se puede utilizar Supabase para guardar  archivos (como im\u00e1genes, videos, documentos, etc.) y para que est\u00e9n disponibles a trav\u00e9s de internet [6].</p> <p>Supabase Storage facilita la carga y la entrega de archivos de cualquier tama\u00f1o, proporcionando un sistema o framework robusto para controlar el acceso a ellos.</p> <p>Se puede usar Supabase Storage para almacenar im\u00e1genes, videos, documentos y cualquier otro tipo de archivo. Sirve los recursos con una CDN global para reducir la latencia desde m\u00e1s de 285 ciudades en todo el mundo. Supabase Storage incluye un optimizador de im\u00e1genes integrado, para hacer posible cambiar el tama\u00f1o y comprimir archivos multimedia sobre la marcha.</p> <ul> <li>Funciones Edge: \u26a1\ufe0f</li> </ul> <p>Las Edge Functions son funciones de TypeScript que se ejecutan en el servidor, distribuidas globalmente en el \"edge\" (el borde de la red), cerca de los usuarios [7]. Se pueden usar para escuchar webhooks o para integrar el proyecto de Supabase con servicios de terceros como Stripe. Las Edge Functions se desarrollan utilizando Deno, lo que ofrece varios beneficios como desarrollador:</p> <p>\u2714\ufe0f Son de c\u00f3digo abierto.</p> <p>\u2714\ufe0f Son portables. Las Edge Functions de Supabase se ejecutan localmente y en cualquier otra plataforma compatible con Deno (incluida infraestructura auto-hospedada).</p> <p>\u2714\ufe0f Prioriza TypeScript y soporta WASM.</p> <p>\u2714\ufe0f Las Edge Functions est\u00e1n distribuidas globalmente para una baja latencia. </p> <ul> <li>Realtime: \ud83d\udd17</li> </ul> <p>Env\u00eda y recibe mensajes a clientes conectados [8].</p> <p>Supabase ofrece un servicio Realtime distribuido globalmente con las siguientes caracter\u00edsticas:</p> <p>\u2747\ufe0f Broadcast</p> <p>Env\u00eda mensajes de baja latencia utilizando las bibliotecas cliente, REST APIs o bases de datos [9].</p> <p>Se pueden usar las bibliotecas cliente de Supabase para recibir mensajes de Broadcast (difusi\u00f3n).</p> <p>\u27a1\ufe0f Inicializa el cliente.</p> <p>Ir a la Configuraci\u00f3n de la API del proyecto de Supabase y obtener la URL y la clave API p\u00fablica an\u00f3nima.</p> <pre><code>                        # Python\n                        from supabase import create_client\n\n                        URL = \"https://&lt;project&gt;.supabase.co\"\n                        KEY = \"&lt;your-anon-key&gt;\"\n                        supabase = create_client(URL, KEY)\n</code></pre> <p>\u27a1\ufe0f Recibiendo mensajes de Broadcast (difusi\u00f3n).</p> <p>Se puede proporcionar una funci\u00f3n de devoluci\u00f3n de llamada (callback) para el canal de broadcast y as\u00ed recibir mensajes. Este ejemplo recibir\u00e1 cualquier mensaje de broadcast que se env\u00ede al canal test-channel:</p> <pre><code># Python\n\n# Join a room/topic. Can be anything except for 'realtime'.\nmy_channel = supabase.channel('test-channel')\n\n# Simple function to log any messages we receive\ndef message_received(payload):\nprint(f\"Broadcast received: {payload}\")\n\n# Subscribe to the Channel\nmy_channel\n.on_broadcast('shout', message_received) # Listen for \"shout\". Can be \"*\" to listen to all events\n.subscribe()\n</code></pre> <p>\u27a1\ufe0f Enviar mensajes</p> <p>Enviar mensajes de Broadcast o difusi\u00f3n usando las bibliotecas cliente.</p> <p>Se pueden usar las bibliotecas cliente de Supabase para enviar mensajes de Broadcast (difusi\u00f3n).</p> <pre><code># Python\n\nmy_channel = supabase.channel('test-channel')\n\n# Sending a message after subscribing will use Websockets\ndef on_subscribe(status, err):\nif status != RealtimeSubscribeStates.SUBSCRIBED:\n    return\nmy_channel.send_broadcast(\n    'shout',\n    { \"message\": 'hello, world' },\n)\nmy_channel.subscribe(on_subscribe)\n</code></pre> <p>\u27a1\ufe0f Enviar mensajes de Broadcast usando la API REST.</p> <p>Se pueden enviar mensajes de Broadcast (difusi\u00f3n) realizando una peticiones HTTP a los servidores Realtime.</p> <pre><code>curl -v \\\n-H 'apikey: &lt;SUPABASE_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\n\"messages\": [\n    {\n    \"topic\": \"test\",\n    \"event\": \"event\",\n    \"payload\": { \"test\": \"test\" }\n    }\n]\n}' \\\n'https://&lt;PROJECT_REF&gt;.supabase.co/realtime/v1/api/broadcast'\n</code></pre> <p>\u2747\ufe0f Presence</p> <p>Comparte el estado entre usuarios con Realtime Presence (Presencia en Tiempo Real) [10].</p> <p>Posibilidad de usar las bibliotecas cliente de Supabase para rastrear el estado de Presencia entre usuarios. </p> <p>\u27a1\ufe0f Inicializa el cliente.</p> <p>Ir a la Configuraci\u00f3n de la API del proyecto de Supabase para obtener la URL y la clave API p\u00fablica an\u00f3nima.</p> <pre><code>#Python\n\nfrom supabase import create_client\n\nSUPABASE_URL = 'https://&lt;project&gt;.supabase.co'\nSUPABASE_KEY = '&lt;your-anon-key&gt;'\n\nsupabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n</code></pre> <p>\u27a1\ufe0f Sincroniza y rastrea el estado.</p> <p>Escucha los eventos de sincronizaci\u00f3n (sync), uni\u00f3n (join) y abandono (leave) que se activan cada vez que un cliente se une o abandona el canal, o cambia su porci\u00f3n de estado:</p> <pre><code>#Python\n\nroom_one = supabase.channel('room_01')\nroom_one\n.on_presence_sync(lambda: print('sync', room_one.presenceState()))\n.on_presence_join(lambda key, curr_presences, joined_presences: print('join', key, curr_presences, joined_presences))\n.on_presence_leave(lambda key, curr_presences, left_presences: print('leave', key, curr_presences, left_presences))\n.subscribe()\n</code></pre> <p>\u27a1\ufe0f Enviando estado</p> <p>Es posible enviar el estado a todos los suscriptores utilizando track():</p> <pre><code># Python\n\nroom_one = supabase.channel('room_01')\n\nuser_status = {\n\"user\": 'user-1',\n\"online_at\": datetime.datetime.now().isoformat(),\n}\n\ndef on_subscribe(status, err):\nif status != RealtimeSubscribeStates.SUBSCRIBED:\n    return\n\nroom_one.track(user_status)\n\nroom_one.subscribe(on_subscribe)\n</code></pre> <p>Un cliente recibir\u00e1 el estado de cualquier otro cliente que est\u00e9 suscrito al mismo tema (en este caso, room_01). Tambi\u00e9n activar\u00e1 autom\u00e1ticamente sus propios controladores de eventos sync y join.</p> <p>\u27a1\ufe0f Dejar de rastrear (Stop tracking)</p> <p>Se puede dejar de rastrear la presencia utilizando el m\u00e9todo untrack(). Esto activar\u00e1 los controladores de eventos sync y leave.</p> <pre><code>#Python\n\nroom_one.untrack()\n</code></pre> <p>\u27a1\ufe0f Clave de presencia (Presence key)</p> <p>De forma predeterminada, Presence generar\u00e1 una clave UUIDv1 \u00fanica en el servidor para rastrear el estado de un canal de cliente. Si se prefiere, es posible proporcionar una clave personalizada al crear el canal. Esta clave debe ser \u00fanica entre los clientes.</p> <pre><code>#Python\n\nchannel_c = supabase.channel('test', {\n\"config\": {\n    \"presence\": {\n    \"key\": 'userId-123',\n    },\n},\n})\n</code></pre> <p>\u2747\ufe0f Cambios Postgres</p> <p>Escuchar los cambios de Postgres utilizando Supabase Realtime. [11]</p> <p>En este ejemplo, se configurar\u00e1 una tabla de base de datos, se proteger\u00e1 con Seguridad a Nivel de Fila (RLS) y la manera de suscripci\u00f3n a todos los cambios ser\u00e1 utilizando las bibliotecas cliente de Supabase.</p> <p>1\ufe0f\u20e3 Configurar un proyecto de Supabase con una tabla 'todos'</p> <p>Crea un nuevo proyecto en el Dashboard de Supabase.</p> <p>Una vez que el proyecto est\u00e9 listo, crea una tabla en la base de datos de Supabase. Se puede hacer mediante la interfaz de Tabla o el Editor SQL.</p> <pre><code>-- SQL\n\n-- Create a table called \"todos\"\n-- with a column to store tasks.\ncreate table todos (\nid serial primary key,\ntask text\n);\n</code></pre> <p>2\ufe0f\u20e3 Permitir acceso an\u00f3nimo</p> <p>En este ejemplo, se activar\u00e1 la Seguridad a Nivel de Fila para esta tabla y permitiremos el acceso an\u00f3nimo. En producci\u00f3n, deberemos asegurarnos de proteger las aplicaciones con los permisos apropiados.</p> <pre><code>--SQL\n\n-- Turn on security\nalter table \"todos\"\nenable row level security;\n\n-- Allow anonymous access\ncreate policy \"Allow anonymous access\"\non todos\nfor select\nto anon\nusing (true);\n</code></pre> <p>3\ufe0f\u20e3 Habilita la replicaci\u00f3n de Postgres</p> <p>Ir a la configuraci\u00f3n de Publicaciones del proyecto y, debajo de supabase_realtime, y activar los interruptores de las tablas a las que se desea escuchar.</p> <p>4\ufe0f\u20e3 Instalar el cliente</p> <p>Instalar el Cliente Javascript de Supabase</p> <pre><code>npm install @supabase/supabase-js\n</code></pre> <p>5\ufe0f\u20e3 Crear el cliente</p> <p>Este cliente ser\u00e1 usado para escuchar a los cambios de Postgres.</p> <pre><code>import { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n'https://&lt;project&gt;.supabase.co',\n'&lt;your-anon-key&gt;'\n)\n</code></pre> <p>6\ufe0f\u20e3 Escuchar cambios por esquema</p> <p>Escucha los cambios en todas las tablas del esquema public estableciendo la propiedad schema a 'public' y el nombre del evento a *. El nombre del evento puede ser uno de los siguientes:</p> <pre><code>INSERT\nUPDATE\nDELETE\n*\n</code></pre> <p>El nombre del canal puede ser cualquier cadena excepto 'realtime'.</p> <p>7\ufe0f\u20e3 Insertar datos de prueba</p> <p>Ahora es posible agregar algunos datos a la tabla, lo que activar\u00e1 el controlador de eventos channelA.</p> <pre><code>insert into todos (task)\nvalues\n('Change!');\n</code></pre>"},{"location":"supabase/#arquitectura-de-supabase","title":"Arquitectura de Supabase \ud83d\udcd0","text":"<p>Recordemos que Supabase es de c\u00f3digo abierto. Entonces los desarrolladores eligen herramientas de c\u00f3digo abierto que son escalables y las hacen f\u00e1ciles de usar [12].</p> <p>Supabase no es una r\u00e9plica exacta de Firebase. Si bien se construyen muchas de las funciones que ofrece Firebase, no lo hacen de la misma manera: Las elecciones tecnol\u00f3gicas son bastante diferentes; todo lo que usan es de c\u00f3digo abierto; y siempre que es posible, utilizan y apoyan herramientas existentes en lugar de desarrollar desde cero.</p> <p>El objetivo en Supabase es hacer que todo Postgres sea f\u00e1cil de usar. Eso no significa que se tenga que usarlo todo. Si se es un veterano de Postgres, probablemente  encantar\u00e1n las herramientas que se ofrecen. Si nunca se ha usado Postgres antes, entonces deberemos comenzar poco a poco e ir creciendo. Si solo se quiere tratar a Postgres como un simple almac\u00e9n de tablas, est\u00e1 perfectamente bien.</p> <p>Cada proyecto de Supabase consta de varias herramientas:</p> <p> </p> <p>\u27a1\ufe0f Postgres (como base de datos)</p> <p>Postgres es el n\u00facleo de Supabase. No se abstrae la base de datos Postgres; se puede acceder a ella y usarla con privilegios completos. Supabase proporciona herramientas que hacen que Postgres sea tan f\u00e1cil de usar como Firebase.</p> <pre><code>Documentaci\u00f3n oficial: postgresql.org/docs\nC\u00f3digo fuente: github.com/postgres/postgres (mirror)\nLicencia: PostgreSQL License - Lenguaje: C\n</code></pre> <p>\u27a1\ufe0f Studio (panel de control)</p> <p>Un panel de control de c\u00f3digo abierto para gestionar las base de datos y servicios.</p> <pre><code>Documentaci\u00f3n oficial: https://supabase.com/docs\nC\u00f3digo fuente: github.com/supabase/supabase\nLicencia: Apache 2\nLenguaje: TypeScript\n</code></pre> <p>\u27a1\ufe0f GoTrue (Autenticaci\u00f3n)</p> <p>Una API basada en JWT para gestionar usuarios y emitir tokens de acceso. Se integra con la Seguridad a Nivel de Fila de PostgreSQL y los servidores de la API.</p> <pre><code>Documentaci\u00f3n oficial: https://supabase.com/docs/reference/self-hosting-auth/start\nC\u00f3digo fuente: github.com/supabase/gotrue\nLicencia: MIT\nLenguaje: Go\n</code></pre> <p>\u27a1\ufe0f PostgREST (API)</p> <p>Un servidor web independiente que convierte la base de datos Postgres directamente en una API RESTful. Lo utilizamos con nuestra extensi\u00f3n pg_graphql para proporcionar una API GraphQL.</p> <pre><code>Documentaci\u00f3n oficial: postgrest.org\nC\u00f3digo fuente: github.com/PostgREST/postgrest\nLicencia: MIT\nLenguaje: Haskell\n</code></pre> <p>\u27a1\ufe0f Realtime (API y multijugador)</p> <p>Un motor WebSocket escalable para gestionar la Presencia de usuarios, la difusi\u00f3n de mensajes y la transmisi\u00f3n de cambios en la base de datos.</p> <pre><code>Documentaci\u00f3n oficial: https://supabase.com/docs/guides/realtime\nC\u00f3digo fuente: github.com/supabase/realtime\nLicencia: Apache 2\nLenguaje: Elixir\n</code></pre> <p>\u27a1\ufe0f API de Storage (almacenamiento de archivos grandes)</p> <p>Un servicio de almacenamiento de objetos compatible con S3 que almacena metadatos en Postgres.</p> <pre><code>Documentaci\u00f3n oficial: https://supabase.com/docs/reference/self-hosting-storage/start\nC\u00f3digo fuente: github.com/supabase/storage-api\nLicencia: Apache 2.0\nLenguaje: Node.js / TypeScript\n</code></pre> <p>\u27a1\ufe0f Deno (Edge Functions)</p> <p>Un entorno de ejecuci\u00f3n moderno para JavaScript y TypeScript.</p> <pre><code>Documentaci\u00f3n oficial: https://docs.deno.com/\nC\u00f3digo fuente: https://github.com/denoland/deno\nLicencia: MIT\nLenguaje: TypeScript / Rust\n</code></pre>"}]}